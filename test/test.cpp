#include <cstddef>
#include <map>

#include "../verifiers.h"
#include "gtest/gtest.h"

TEST(Verifiers, ExactlyOne) {
  // For over half of the cards, test that exactly one criterion on the card
  // holds.
  for (std::size_t card = 1; card <= 25; ++card) {
    if (card == 14 || card == 15) {
      continue;
    }
    const Verifier& v = verifiers[card - 1];
    bool all_good = true;
    for (int i = 1; i <= 5; ++i) {
      for (int j = 1; j <= 5; ++j) {
        for (int k = 1; k <= 5; ++k) {
          std::size_t success = 0;
          for (Criterion c : v) {
            if (c(i, j, k)) {
              success += 1;
            }
          }
          if (success != 1) {
            all_good = false;
          }
        }
      }
    }
    if (!all_good) {
      ADD_FAILURE() << "Card " << card << " is bad";
    }
  }
}

// Test data for testing cards 1-14 and 16-25
const std::map<int, std::vector<std::vector<Triple>>> exactly_one_data = {
    {1,
     {
         {{1, 1, 1}, {1, 4, 2}, {1, 5, 2}, {1, 5, 4}, {1, 3, 3}},
         {{2, 5, 2}, {4, 2, 3}, {4, 1, 2}, {2, 1, 1}, {5, 1, 2}},
     }},

    {2,
     {
         {{2, 1, 5}, {2, 1, 4}, {2, 3, 2}, {2, 1, 2}, {1, 3, 5}},
         {{3, 3, 1}, {3, 2, 1}, {3, 1, 2}, {3, 2, 4}, {3, 1, 5}},
         {{4, 3, 4}, {4, 2, 4}, {5, 5, 3}, {4, 3, 2}, {5, 3, 1}},
     }},

    {3,
     {
         {{4, 1, 2}, {4, 2, 2}, {3, 1, 5}, {3, 2, 5}, {5, 2, 1}},
         {{3, 3, 5}, {2, 3, 4}, {2, 3, 3}, {1, 3, 1}, {1, 3, 4}},
         {{1, 4, 4}, {2, 4, 5}, {3, 4, 3}, {5, 5, 4}, {4, 4, 5}},
     }},

    {4,
     {
         {{5, 2, 3}, {2, 3, 5}, {2, 1, 3}, {3, 3, 2}, {5, 3, 5}},
         {{2, 4, 2}, {5, 4, 3}, {4, 4, 2}, {1, 4, 3}, {2, 4, 5}},
         {{5, 5, 5}, {2, 5, 4}, {4, 5, 4}, {2, 5, 3}, {2, 5, 1}},
     }},

    {5,
     {
         {{2, 1, 1}, {4, 5, 5}, {2, 1, 3}, {4, 4, 1}, {4, 4, 2}},
         {{1, 2, 4}, {1, 2, 1}, {5, 2, 3}, {3, 4, 5}, {1, 1, 2}},
     }},

    {6,
     {
         {{3, 2, 1}, {2, 4, 5}, {3, 4, 5}, {5, 4, 4}, {3, 4, 3}},
         {{2, 3, 3}, {1, 1, 1}, {1, 3, 3}, {3, 3, 2}, {3, 5, 2}},
     }},

    {7,
     {
         {{2, 3, 2}, {3, 1, 2}, {5, 5, 2}, {5, 3, 2}, {3, 1, 4}},
         {{3, 3, 5}, {2, 2, 1}, {4, 5, 5}, {3, 1, 1}, {2, 3, 1}},
     }},

    {8,
     {
         {{5, 5, 2}, {5, 3, 2}, {4, 3, 4}, {3, 3, 5}, {2, 3, 2}},
         {{4, 3, 1}, {1, 3, 2}, {3, 1, 5}, {1, 5, 5}, {1, 5, 3}},
         {{1, 1, 2}, {1, 1, 5}, {1, 5, 1}, {4, 1, 1}, {3, 1, 1}},
         {{1, 1, 1}},
     }},

    {9,
     {
         {{5, 4, 4}, {4, 5, 4}, {4, 5, 2}, {4, 1, 2}, {2, 1, 5}},
         {{3, 4, 4}, {5, 3, 5}, {2, 2, 3}, {2, 3, 2}, {3, 2, 4}},
         {{3, 4, 3}, {1, 3, 3}, {3, 3, 2}, {5, 3, 3}, {4, 3, 3}},
         {{3, 3, 3}},
     }},

    {10,
     {
         {{1, 3, 2}, {5, 1, 3}, {2, 2, 2}, {2, 1, 5}, {2, 3, 1}},
         {{4, 3, 5}, {4, 3, 3}, {4, 2, 2}, {2, 5, 4}, {3, 4, 2}},
         {{1, 4, 4}, {4, 4, 5}, {4, 3, 4}, {2, 4, 4}, {4, 1, 4}},
         {{4, 4, 4}},
     }},

    {11,
     {
         {{2, 3, 4}, {2, 4, 4}, {2, 4, 2}, {1, 3, 4}, {1, 4, 3}},
         {{2, 2, 2}, {3, 3, 4}, {2, 2, 3}, {1, 1, 5}, {4, 4, 5}},
         {{3, 1, 5}, {5, 1, 4}, {5, 3, 3}, {4, 3, 1}, {2, 1, 3}},
     }},

    {12,
     {
         {{3, 1, 4}, {1, 4, 2}, {1, 1, 5}, {1, 5, 4}, {3, 4, 4}},
         {{5, 2, 5}, {1, 2, 1}, {2, 2, 2}, {1, 5, 1}, {4, 3, 4}},
         {{5, 5, 4}, {4, 4, 1}, {3, 1, 1}, {2, 5, 1}, {5, 1, 2}},
     }},

    {13,
     {
         {{5, 4, 5}, {1, 1, 4}, {3, 2, 5}, {4, 4, 5}, {5, 2, 4}},
         {{5, 5, 5}, {4, 5, 5}, {5, 2, 2}, {4, 1, 1}, {1, 1, 1}},
         {{1, 5, 4}, {1, 4, 3}, {2, 5, 3}, {2, 4, 3}, {5, 4, 1}},
     }},

    {16,
     {
         {{2, 3, 4}, {2, 1, 4}, {4, 2, 2}, {2, 4, 5}, {5, 2, 2}},
         {{5, 5, 4}, {3, 4, 1}, {3, 1, 2}, {4, 3, 5}, {3, 3, 3}},
     }},

    {17,
     {
         {{1, 3, 1}, {1, 3, 5}, {5, 1, 3}, {1, 1, 5}, {3, 1, 3}},
         {{5, 1, 4}, {1, 5, 4}, {2, 3, 3}, {1, 4, 5}, {4, 3, 5}},
         {{3, 4, 4}, {2, 3, 4}, {1, 2, 4}, {5, 2, 2}, {4, 2, 1}},
         {{2, 4, 4}, {4, 2, 2}, {2, 4, 2}, {2, 2, 4}, {4, 2, 4}},
     }},

    {18,
     {
         {{1, 5, 4}, {4, 1, 1}, {1, 2, 1}, {4, 3, 1}, {5, 3, 4}},
         {{2, 3, 2}, {4, 4, 3}, {3, 3, 5}, {4, 2, 1}, {4, 2, 5}},
     }},

    {19,
     {
         {{2, 2, 5}, {2, 1, 5}, {1, 1, 1}, {3, 2, 1}, {4, 1, 2}},
         {{2, 4, 2}, {4, 2, 5}, {3, 3, 1}, {5, 1, 3}, {2, 4, 1}},
         {{3, 4, 5}, {3, 4, 3}, {4, 4, 3}, {3, 5, 5}, {4, 5, 1}},
     }},

    {20,
     {
         {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {4, 4, 4}, {5, 5, 5}},
         {{1, 4, 4}, {5, 1, 1}, {5, 5, 4}, {4, 3, 4}, {2, 4, 2}},
         {{5, 2, 4}, {4, 1, 5}, {2, 4, 1}, {4, 1, 3}, {2, 3, 4}},
     }},

    {21,
     {
         {{1, 4, 2}, {2, 4, 5}, {5, 1, 3}, {4, 2, 5}, {1, 4, 5}},
         {{1, 2, 1}, {2, 4, 2}, {5, 4, 5}, {3, 3, 2}, {1, 5, 5}},
     }},

    {22,
     {
         {{2, 3, 5}, {1, 3, 4}, {1, 3, 5}, {1, 2, 5}, {1, 4, 5}},
         {{5, 4, 2}, {4, 3, 2}, {4, 2, 1}, {5, 3, 1}, {3, 2, 1}},
         {{5, 1, 3}, {4, 3, 3}, {5, 2, 3}, {5, 5, 1}, {1, 2, 1}},
     }},

    {23,
     {
         {{1, 1, 3}, {1, 2, 1}, {3, 1, 1}, {1, 1, 1}, {1, 1, 2}},
         {{1, 3, 2}, {2, 1, 3}, {2, 2, 2}, {1, 2, 3}, {1, 4, 1}},
         {{3, 2, 4}, {3, 3, 1}, {2, 3, 5}, {3, 5, 1}, {4, 1, 5}},
     }},

    {24,
     {
         {{3, 4, 5}, {2, 3, 4}, {1, 2, 3}},
         {{3, 4, 3}, {1, 4, 5}, {2, 2, 3}, {3, 1, 2}, {4, 5, 1}},
         {{1, 3, 5}, {2, 2, 1}, {1, 3, 2}, {4, 4, 2}, {4, 4, 4}},
     }},

    {25,
     {
         {{2, 4, 2}, {3, 1, 3}, {1, 3, 5}, {1, 3, 3}, {5, 3, 1}},
         {{3, 4, 3}, {4, 3, 4}, {1, 2, 5}, {5, 3, 2}, {2, 3, 5}},
         {{3, 2, 1}, {2, 3, 4}, {5, 4, 3}, {4, 3, 2}, {1, 2, 3}},
     }}};

// Check that the verifiers return the correct data.
TEST(Verifiers, ExactlyOneData) {
  for (std::size_t card = 1; card <= 25; ++card) {
    if (card == 14 || card == 15) {
      continue;
    }
    const Verifier& v = verifiers[card - 1];
    const auto iter = exactly_one_data.find(card);
    if (iter == exactly_one_data.end()) {
      ADD_FAILURE() << "Missing data for " << card;
    } else {
      const auto& xxx = iter->second;
      ASSERT_EQ(xxx.size(), v.size());
      for (size_t i = 0; i < xxx.size(); ++i) {
        for (const Triple t : xxx[i]) {
          EXPECT_TRUE(v[i](t[0], t[1], t[2]))
              << "Card " << card << ", part " << i;
        }
      }
    }
  }
}
